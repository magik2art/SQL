-- Data Definition Language
-- Create, Drop, Alter, Truncate

DROP database if exists vk;

create database vk;

use vk;

drop table if exists users;

create table users (
	id bigint unsigned not null AUTO_INCREMENT PRIMARY KEY,
	firstname varchar(50),
	lastname varchar(50) comment 'Фамилия',
	email varchar(120) unique,
	password_hash varchar(100), -- 123457 -> ojrgnboroomom
	phone bigint unsigned unique,
	
	index users_firstname_lastname_idx (firestname, lastname)
	
);


create table profiles(
	user_id BIGINT UNSIGNED NOT NULL,
	gender char(1),
	birthday date,
	photo_id BIGINT UNSIGNED not null,
	created_at date default now(),
	hometown varchar(100)
);


alter table profiles add constraint fk_user_id
foreign key (user_id) references user(id)
on UPDATE cascade
on delete restrict;


drop table if exists messages;

create table messages(
	id SERIAL, --SERIAL = BIGINT UNSIGNED NOT NULL auto_increment unique
	from_user_id BIGINT UNSIGNED NOT NULL,
	to_user_id BIGINT UNSIGNED NOT NULL,
	body TEXT,
	created_at datetime default now(),
	
	foreign key (from_user_id) references user(id),
	foreign key (to_user_id) references user(id)
	);
	

drop table if exists friends_requests;

create table friends_requests(
	initiator_user_id BIGINT UNSIGNED NOT NULL,
	target_user_id BIGINT UNSIGNED NOT NULL,
	'status' enum('requested', 'approved', 'declined', 'unfriended'),
	requested_at datetime default now(),
	updated_AT DATETIME on update current_timestamp,
	
	primary key (initiator_user_id, target_user_id),
	foreign key (initiator_user_id) references users(id),
	foreign key (target_user_id) references users(id)	
);

alter table friends_requests
add check (initiator_user_id <> target_user_id);



drop table if exists communities;

create table if exists communities;

create table communities(
	id SERIAL,
	name varchar(150),
	admin_user_id BIGINT UNSIGNED NOT NULL
	
	INDEX COMMUNITIES_NAME_IDX(NAME),
	foreign key(admin_user_id) references user(id)
);


drop table if exists user_communities;

create table user_communities;
	user_id bigint UNSIGNED NOT NULL,
	community_id BIGINT UNSIGNED NOT NULL,
	
	
	primary key (user_id, community_id),
	foreign key (user_id) references users(id),
	foreign key (community_id) references communities(id)
);


DROP table if exists media_types;

create table media_types(
	id serial,
	name varchar(255),
	created_at datetime default now(),
	updated_at datetime on update current_timestamp,	
);


drop table if exists media;

create table media(
	id serial,
	media_type_id BIGINT UNSIGNED NOT NULL,
	user_id BIGINT UNSIGNED NOT NULL,
	body texxt,
	filename varchar(255),
	'size' int,
	metadata json,
	created_at datetime default now(),
	updated_at datetime on update current_timestamp,	
	
	foreign key (user_id) references users(id),
	foreign key (media_type_id) references media_types(id)
);

drop table if exists likes;

create table likes(
	id serial,
	user_id BIGINT UNSIGNED NOT NULL,
	media_id BIGINT UNSIGNED NOT NULL,
	created_at datetime default now()
);


drop table if exists photo_albums;

create table photo_albums(	
	id serial,
	name varchar(100),
	user_id BIGINT UNSIGNED OT NULL,
	
	foreign key (user_id) references users(id),
	primary key (id)
);


drop table if exists photos;

create table photos(
	id_serial,
	album_id BIGINT UNSIGNED NOT NULL,
	media_id BIGINT UNSIGNED NOT NULL,
	
	foreign key (album_id) references photo_albums(id),
	foreign key (media_id) references media(id)
);
	
	